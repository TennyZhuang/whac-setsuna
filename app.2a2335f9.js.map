{"version":3,"sources":["app.ts"],"names":[],"mappings":"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","file":"app.2a2335f9.js","sourceRoot":"..","sourcesContent":["import setunaURL from './assets/setuna1.png';\nimport hammerURL from './assets/hammer.png';\n\n(async function () {\n  const canvas = <HTMLCanvasElement>document.getElementById(\"game\");\n  const scoreboard = <HTMLDivElement>document.getElementById('score');\n  const content = <HTMLDivElement>document.getElementById('content');\n\n  canvas.width = 1000;\n  canvas.height = 600;\n\n  const context = canvas.getContext('2d');\n  const setuna = new Image();\n  setuna.src = setunaURL;\n  const hammer = new Image();\n  hammer.src = hammerURL;\n\n  await Promise.all([\n    new Promise((resolve, reject) => {\n      setuna.onload = resolve;\n      setuna.onerror = reject;\n    }),\n    new Promise((resolve, reject) => {\n      hammer.onload = resolve;\n      hammer.onerror = reject;\n    }),\n  ]);\n\n  const sleep = (ms: number) => new Promise((resolve, _) => {\n    setTimeout(resolve, ms);\n  });\n\n  let progress = 0;\n  let step = 0.02;\n  let beating = false;\n  let hammerX = 0;\n  let hammerY = 0;\n  let existing = false;\n  let posX = 0;\n  let posY = 0;\n\n  canvas.onmousedown = (ev) => {\n    hammerX = ev.offsetX;\n    hammerY = ev.offsetY;\n    beating = true;\n  }\n  let score = 0;\n\n  async function draw() {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    if (existing) {\n      context.drawImage(setuna, 0, setuna.height*(1-progress), setuna.width, setuna.height, posX, posY+setuna.height*(1-progress), setuna.width, setuna.height);\n    }\n    if (beating) {\n      context.drawImage(hammer, hammerX-50, hammerY-50, 100, 100);\n    }\n  }\n\n  async function drawLoop() {\n    while (true) {\n      await sleep(20);\n      draw();\n    }\n  }\n\n  async function roundLoop() {\n    while (true) {\n      await sleep(Math.random()*80+100);\n      posX = Math.random() * 300 + 350;\n      posY = Math.random() * 200 + 150;\n      step = 0.01 + Math.random() * 0.08;\n      await round();\n    }\n  }\n\n  function intersect(x: number, y: number) {\n    return posX <= x && x <= posX + setuna.width && posY <= y && y <= posY + setuna.height;\n  }\n\n  async function round() {\n    progress = 0;\n    existing = true;\n    const wait = (ms: number) => new Promise((resolve, reject) => {\n      setTimeout(resolve, ms);\n      canvas.onmouseup = (ev) => {\n        beating = false;\n        if (!intersect(ev.offsetX, ev.offsetY)) {\n          return;\n        }\n        reject();\n      };\n    });\n\n    try {\n      while (progress < 1) {\n        progress += step;\n        await wait(20);\n      }\n      await wait(Math.random()*200+100);\n      while (progress > 0) {\n        progress -= 0.1;\n        await wait(20);\n      }\n      progress = 0;\n      content.innerText = '让雪菜逃走了！'\n    } catch {\n      score += 1;\n      content.innerText = '击中雪菜了！'\n      while (progress > 0) {\n        progress -= 0.1;\n        await sleep(20);\n      }\n      progress = 0;\n      scoreboard.innerText = `总分：${score}`;\n      existing = true;      \n    } finally {\n      existing = false;\n    }\n  }\n\n  Promise.all([drawLoop(), roundLoop()]).then(() => {\n    console.log(\"game exit.\");\n  });\n})();\n"]}